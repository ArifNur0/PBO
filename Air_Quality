{"cells":[{"cell_type":"code","source":["import pandas as pd\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.preprocessing import MinMaxScaler\n","\n","from sklearn.model_selection import train_test_split\n","\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import accuracy_score,classification_report,confusion_matrix\n","\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","data = pd.read_excel('air_quality.xlsx')\n","\n","print(data)\n","\n","#PreProcessing\n","data.isnull().sum()\n","\n","data['Temperature'].fillna(data['Temperature'].median(),inplace=True)\n","data['Humidity'].fillna(data['Humidity'].median(),inplace=True)\n","data['PM2.5'].fillna(data['PM2.5'].median(),inplace=True)\n","data['PM10'].fillna(data['PM10'].median(),inplace=True)\n","data['NO2'].fillna(data['NO2'].median(),inplace=True)\n","data['SO2'].fillna(data['SO2'].median(),inplace=True)\n","data['CO'].fillna(data['CO'].median(),inplace=True)\n","data['Proximity_to_Industrial_Areas'].fillna(data['Proximity_to_Industrial_Areas'].median(),inplace=True)\n","data['Population_Density'].fillna(data['Population_Density'].median(),inplace=True)\n","data['Air Quality'].fillna(data['Air Quality'].mode()[0],inplace=True)\n","\n","data\n","\n","\n","data.isnull().sum()\n","\n"],"metadata":{"id":"attgXqqalvO7","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1734156025302,"user_tz":-420,"elapsed":5448,"user":{"displayName":"Wuwa Player01","userId":"02999038230040709366"}},"outputId":"16c2a904-58ed-4fda-bee4-01016f4624af"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["     Temperature  Humidity  PM2.5  PM10   NO2   SO2    CO  \\\n","0           29.8       NaN    5.2  17.9   NaN   9.2  1.72   \n","1           28.3      75.6    2.3  12.2  30.8   NaN  1.64   \n","2            NaN      74.7   26.7   NaN  24.4  12.6  1.63   \n","3           27.1      39.1    6.1   6.3   NaN   5.3  1.15   \n","4           26.5      70.7    NaN  16.0  21.9   5.6   NaN   \n","..           ...       ...    ...   ...   ...   ...   ...   \n","494         30.3      84.5   14.1  28.8  31.1  21.1   NaN   \n","495         21.5      54.4   24.5   NaN  17.8   5.5  0.91   \n","496         24.4      48.1   21.9  29.7  11.1  12.7  0.97   \n","497         32.6       NaN   30.8  38.8  30.9  17.5  1.85   \n","498         34.3      81.2   32.2  47.1  31.7  16.5   NaN   \n","\n","     Proximity_to_Industrial_Areas  Population_Density Air Quality  \n","0                              6.3               319.0    Moderate  \n","1                              6.0                 NaN    Moderate  \n","2                              NaN               619.0         NaN  \n","3                             11.1                 NaN        Good  \n","4                             12.7               303.0         NaN  \n","..                             ...                 ...         ...  \n","494                           12.1               506.0         NaN  \n","495                           10.9                 NaN        Good  \n","496                           10.6                 NaN        Good  \n","497                            4.9               448.0        Poor  \n","498                            3.9               507.0        Poor  \n","\n","[499 rows x 10 columns]\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-3-7be55f05557d>:20: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  data['Temperature'].fillna(data['Temperature'].median(),inplace=True)\n","<ipython-input-3-7be55f05557d>:21: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  data['Humidity'].fillna(data['Humidity'].median(),inplace=True)\n","<ipython-input-3-7be55f05557d>:22: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  data['PM2.5'].fillna(data['PM2.5'].median(),inplace=True)\n","<ipython-input-3-7be55f05557d>:23: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  data['PM10'].fillna(data['PM10'].median(),inplace=True)\n","<ipython-input-3-7be55f05557d>:24: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  data['NO2'].fillna(data['NO2'].median(),inplace=True)\n","<ipython-input-3-7be55f05557d>:25: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  data['SO2'].fillna(data['SO2'].median(),inplace=True)\n","<ipython-input-3-7be55f05557d>:26: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  data['CO'].fillna(data['CO'].median(),inplace=True)\n","<ipython-input-3-7be55f05557d>:27: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  data['Proximity_to_Industrial_Areas'].fillna(data['Proximity_to_Industrial_Areas'].median(),inplace=True)\n","<ipython-input-3-7be55f05557d>:28: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  data['Population_Density'].fillna(data['Population_Density'].median(),inplace=True)\n","<ipython-input-3-7be55f05557d>:30: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  data['Air Quality'].fillna(data['Air Quality'].mode()[0],inplace=True)\n"]},{"output_type":"execute_result","data":{"text/plain":["Temperature                      0\n","Humidity                         0\n","PM2.5                            0\n","PM10                             0\n","NO2                              0\n","SO2                              0\n","CO                               0\n","Proximity_to_Industrial_Areas    0\n","Population_Density               0\n","Air Quality                      0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Temperature</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Humidity</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>PM2.5</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>PM10</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>NO2</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>SO2</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>CO</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Proximity_to_Industrial_Areas</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Population_Density</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Air Quality</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["coloumn = ['Air Quality']\n","encoder = LabelEncoder()\n","\n","for i in coloumn :\n","  data[i] = encoder.fit_transform(data[i])\n","\n","data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"PMX1_Oudwl8Q","executionInfo":{"status":"ok","timestamp":1734156135287,"user_tz":-420,"elapsed":413,"user":{"displayName":"Wuwa Player01","userId":"02999038230040709366"}},"outputId":"a35688fa-7fdb-4f9c-ac08-f63494516bc3"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Temperature  Humidity  PM2.5   PM10   NO2   SO2    CO  \\\n","0           29.8      69.2    5.2  17.90  25.3   9.2  1.72   \n","1           28.3      75.6    2.3  12.20  30.8   8.1  1.64   \n","2           28.9      74.7   26.7  20.75  24.4  12.6  1.63   \n","3           27.1      39.1    6.1   6.30  25.3   5.3  1.15   \n","4           26.5      70.7   11.5  16.00  21.9   5.6  1.41   \n","..           ...       ...    ...    ...   ...   ...   ...   \n","494         30.3      84.5   14.1  28.80  31.1  21.1  1.41   \n","495         21.5      54.4   24.5  20.75  17.8   5.5  0.91   \n","496         24.4      48.1   21.9  29.70  11.1  12.7  0.97   \n","497         32.6      69.2   30.8  38.80  30.9  17.5  1.85   \n","498         34.3      81.2   32.2  47.10  31.7  16.5  1.41   \n","\n","     Proximity_to_Industrial_Areas  Population_Density  Air Quality  \n","0                              6.3               319.0            2  \n","1                              6.0               497.0            2  \n","2                              7.8               619.0            0  \n","3                             11.1               497.0            0  \n","4                             12.7               303.0            0  \n","..                             ...                 ...          ...  \n","494                           12.1               506.0            0  \n","495                           10.9               497.0            0  \n","496                           10.6               497.0            0  \n","497                            4.9               448.0            3  \n","498                            3.9               507.0            3  \n","\n","[499 rows x 10 columns]"],"text/html":["\n","  <div id=\"df-6b2d6362-8470-4b85-bce8-0789975f8904\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Temperature</th>\n","      <th>Humidity</th>\n","      <th>PM2.5</th>\n","      <th>PM10</th>\n","      <th>NO2</th>\n","      <th>SO2</th>\n","      <th>CO</th>\n","      <th>Proximity_to_Industrial_Areas</th>\n","      <th>Population_Density</th>\n","      <th>Air Quality</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>29.8</td>\n","      <td>69.2</td>\n","      <td>5.2</td>\n","      <td>17.90</td>\n","      <td>25.3</td>\n","      <td>9.2</td>\n","      <td>1.72</td>\n","      <td>6.3</td>\n","      <td>319.0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>28.3</td>\n","      <td>75.6</td>\n","      <td>2.3</td>\n","      <td>12.20</td>\n","      <td>30.8</td>\n","      <td>8.1</td>\n","      <td>1.64</td>\n","      <td>6.0</td>\n","      <td>497.0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>28.9</td>\n","      <td>74.7</td>\n","      <td>26.7</td>\n","      <td>20.75</td>\n","      <td>24.4</td>\n","      <td>12.6</td>\n","      <td>1.63</td>\n","      <td>7.8</td>\n","      <td>619.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>27.1</td>\n","      <td>39.1</td>\n","      <td>6.1</td>\n","      <td>6.30</td>\n","      <td>25.3</td>\n","      <td>5.3</td>\n","      <td>1.15</td>\n","      <td>11.1</td>\n","      <td>497.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>26.5</td>\n","      <td>70.7</td>\n","      <td>11.5</td>\n","      <td>16.00</td>\n","      <td>21.9</td>\n","      <td>5.6</td>\n","      <td>1.41</td>\n","      <td>12.7</td>\n","      <td>303.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>494</th>\n","      <td>30.3</td>\n","      <td>84.5</td>\n","      <td>14.1</td>\n","      <td>28.80</td>\n","      <td>31.1</td>\n","      <td>21.1</td>\n","      <td>1.41</td>\n","      <td>12.1</td>\n","      <td>506.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>495</th>\n","      <td>21.5</td>\n","      <td>54.4</td>\n","      <td>24.5</td>\n","      <td>20.75</td>\n","      <td>17.8</td>\n","      <td>5.5</td>\n","      <td>0.91</td>\n","      <td>10.9</td>\n","      <td>497.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>496</th>\n","      <td>24.4</td>\n","      <td>48.1</td>\n","      <td>21.9</td>\n","      <td>29.70</td>\n","      <td>11.1</td>\n","      <td>12.7</td>\n","      <td>0.97</td>\n","      <td>10.6</td>\n","      <td>497.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>497</th>\n","      <td>32.6</td>\n","      <td>69.2</td>\n","      <td>30.8</td>\n","      <td>38.80</td>\n","      <td>30.9</td>\n","      <td>17.5</td>\n","      <td>1.85</td>\n","      <td>4.9</td>\n","      <td>448.0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>498</th>\n","      <td>34.3</td>\n","      <td>81.2</td>\n","      <td>32.2</td>\n","      <td>47.10</td>\n","      <td>31.7</td>\n","      <td>16.5</td>\n","      <td>1.41</td>\n","      <td>3.9</td>\n","      <td>507.0</td>\n","      <td>3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>499 rows × 10 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6b2d6362-8470-4b85-bce8-0789975f8904')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6b2d6362-8470-4b85-bce8-0789975f8904 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6b2d6362-8470-4b85-bce8-0789975f8904');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-8a26a079-6bf4-4425-96b7-5c3569396aff\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8a26a079-6bf4-4425-96b7-5c3569396aff')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-8a26a079-6bf4-4425-96b7-5c3569396aff button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_822d38e6-9ee1-4e87-9cd2-c02287539a3a\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_822d38e6-9ee1-4e87-9cd2-c02287539a3a button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('data');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data","summary":"{\n  \"name\": \"data\",\n  \"rows\": 499,\n  \"fields\": [\n    {\n      \"column\": \"Temperature\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.448974775865792,\n        \"min\": 14.1,\n        \"max\": 58.6,\n        \"num_unique_values\": 207,\n        \"samples\": [\n          22.7,\n          32.0,\n          29.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Humidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15.207651435769215,\n        \"min\": 38.3,\n        \"max\": 113.0,\n        \"num_unique_values\": 327,\n        \"samples\": [\n          109.5,\n          60.4,\n          97.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PM2.5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25.961907247398297,\n        \"min\": 0.0,\n        \"max\": 240.1,\n        \"num_unique_values\": 292,\n        \"samples\": [\n          1.5,\n          0.8,\n          70.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PM10\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 29.58280730506124,\n        \"min\": -0.2,\n        \"max\": 261.5,\n        \"num_unique_values\": 306,\n        \"samples\": [\n          30.9,\n          72.0,\n          25.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NO2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.630420585558145,\n        \"min\": 9.1,\n        \"max\": 62.1,\n        \"num_unique_values\": 245,\n        \"samples\": [\n          14.5,\n          26.1,\n          22.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SO2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.123921037157444,\n        \"min\": -2.8,\n        \"max\": 42.3,\n        \"num_unique_values\": 209,\n        \"samples\": [\n          3.0,\n          14.0,\n          26.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CO\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.49609094377662966,\n        \"min\": 0.74,\n        \"max\": 3.09,\n        \"num_unique_values\": 161,\n        \"samples\": [\n          2.24,\n          2.55,\n          2.11\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Proximity_to_Industrial_Areas\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.376495914728132,\n        \"min\": 2.5,\n        \"max\": 19.7,\n        \"num_unique_values\": 118,\n        \"samples\": [\n          4.0,\n          11.9,\n          12.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Population_Density\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 147.2135866345841,\n        \"min\": 194.0,\n        \"max\": 937.0,\n        \"num_unique_values\": 319,\n        \"samples\": [\n          527.0,\n          526.0,\n          785.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Air Quality\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0,\n          3,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["#Definosolam Feature dan Label\n","\n","feature = data.iloc[:, 1:].values\n","label = data.iloc[:, 0].values\n","\n","scaler = MinMaxScaler()\n","feature = scaler.fit_transform(feature)\n","\n","\n","feature\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KBMaKgtDvdpb","executionInfo":{"status":"ok","timestamp":1734156142056,"user_tz":-420,"elapsed":531,"user":{"displayName":"Wuwa Player01","userId":"02999038230040709366"}},"outputId":"31b51168-228f-45ee-d189-d80af509e3fe"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0.41365462, 0.02165764, 0.06916316, ..., 0.22093023, 0.16823688,\n","        0.66666667],\n","       [0.49933066, 0.00957934, 0.0473825 , ..., 0.20348837, 0.40780619,\n","        0.66666667],\n","       [0.48728246, 0.11120367, 0.0800535 , ..., 0.30813953, 0.57200538,\n","        0.        ],\n","       ...,\n","       [0.13119143, 0.091212  , 0.11425296, ..., 0.47093023, 0.40780619,\n","        0.        ],\n","       [0.41365462, 0.12827988, 0.1490256 , ..., 0.13953488, 0.34185734,\n","        1.        ],\n","       [0.57429719, 0.13411079, 0.18074131, ..., 0.08139535, 0.42126514,\n","        1.        ]])"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["#Spliting data train dan data test\n","\n","x_train , x_test , y_train , y_test = train_test_split(feature , label , random_state = 42 , test_size = 0.2)\n","print(f\"Data Train : {len(x_train)}\")\n","print(f\"Data Test  : {len(x_test)} \")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uXsf0lvaw1rB","executionInfo":{"status":"ok","timestamp":1734156214954,"user_tz":-420,"elapsed":407,"user":{"displayName":"Wuwa Player01","userId":"02999038230040709366"}},"outputId":"a8cd7431-7565-47e1-811c-b871250da832"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Data Train : 399\n","Data Test  : 100 \n"]}]},{"cell_type":"code","source":["#Model random forest classification\n","\n","model = RandomForestClassifier()\n","\n","model.fit(x_train , y_train)\n","pred = model.predict(x_test)\n","accuracy = accuracy_score(y_test , pred)\n","\n","print(accuracy)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":356},"id":"S0NWR4IKxfPw","executionInfo":{"status":"error","timestamp":1734156354330,"user_tz":-420,"elapsed":720,"user":{"displayName":"Wuwa Player01","userId":"02999038230040709366"}},"outputId":"09beea3d-80ed-472c-bf83-6012aeda5a5b"},"execution_count":9,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"Unknown label type: continuous. Maybe you are trying to fit a classifier, which expects discrete classes on a regression target with continuous values.","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-9-6a2be92f4fbc>\u001b[0m in \u001b[0;36m<cell line: 5>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mRandomForestClassifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_train\u001b[0m \u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0mpred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0maccuracy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maccuracy_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m \u001b[0;34m,\u001b[0m \u001b[0mpred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(estimator, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1471\u001b[0m                 )\n\u001b[1;32m   1472\u001b[0m             ):\n\u001b[0;32m-> 1473\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mfit_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1474\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1475\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    419\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_n_samples\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_outputs_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    420\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 421\u001b[0;31m         \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexpanded_class_weight\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_y_class_weight\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    422\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    423\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"dtype\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mDOUBLE\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mflags\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcontiguous\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py\u001b[0m in \u001b[0;36m_validate_y_class_weight\u001b[0;34m(self, y)\u001b[0m\n\u001b[1;32m    829\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    830\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_validate_y_class_weight\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 831\u001b[0;31m         \u001b[0mcheck_classification_targets\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    832\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    833\u001b[0m         \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/multiclass.py\u001b[0m in \u001b[0;36mcheck_classification_targets\u001b[0;34m(y)\u001b[0m\n\u001b[1;32m    217\u001b[0m         \u001b[0;34m\"multilabel-sequences\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    218\u001b[0m     ]:\n\u001b[0;32m--> 219\u001b[0;31m         raise ValueError(\n\u001b[0m\u001b[1;32m    220\u001b[0m             \u001b[0;34mf\"Unknown label type: {y_type}. Maybe you are trying to fit a \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    221\u001b[0m             \u001b[0;34m\"classifier, which expects discrete classes on a \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Unknown label type: continuous. Maybe you are trying to fit a classifier, which expects discrete classes on a regression target with continuous values."]}]},{"cell_type":"code","source":["report = classification_report(y_test , pred)\n","print(report)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":158},"id":"ClTB3LVjxXv2","executionInfo":{"status":"error","timestamp":1734156329451,"user_tz":-420,"elapsed":622,"user":{"displayName":"Wuwa Player01","userId":"02999038230040709366"}},"outputId":"267d5966-822e-4ec8-df46-3522dbc72134"},"execution_count":8,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'pred' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-8-6a28d05ab986>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mreport\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mclassification_report\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m \u001b[0;34m,\u001b[0m \u001b[0mpred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreport\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'pred' is not defined"]}]}],"metadata":{"colab":{"provenance":[{"file_id":"/v2/external/notebooks/intro.ipynb","timestamp":1734154750962}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}